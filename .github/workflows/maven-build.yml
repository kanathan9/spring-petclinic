# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '21' ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          architecture: x64
          cache: maven
      - name: Build with Maven Wrapper
        run: ./mvnw -B verify -DskipTests

  tag-and-release:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Git user identity
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      # Step 2: Create a tag
      - name: Create a tag
        id: create-a-tag
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          git rev-parse "v$VERSION"
          if git rev-parse "v$VERSION"; then
            echo "Tag v$VERSION already exists. Skipping tag creation."
          else
            git tag -a "v$VERSION" -m "Release v$VERSION"
            git push origin "v$VERSION"
            echo "Tag v$VERSION created and pushed."
            echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.create-a-tag.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          architecture: x64
          cache: maven

      - name: Build with Maven Wrapper
        run: ./mvnw -B package -DskipTests

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: spring-boot-app
          path: target/*.jar

  deploy-to-heroku:
    needs: tag-and-release
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Heroku CLI
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      # Step 3: Login to Heroku
      - name: Login to Heroku
        run: |
          echo "$HEROKU_API_KEY" | heroku auth:token
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      # Step 4: Deploy to Heroku
      - name: Deploy to Heroku
        run: |
          heroku git:remote -a petclinic-cicd
          git push heroku main
